/**
 * IronWorker CE API
 * The ultimate, language agnostic, container based task processing framework.
 *
 * OpenAPI spec version: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.IronJs) {
      root.IronJs = {};
    }
    root.IronJs.NewTask = factory(root.IronJs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The NewTask model module.
   * @module model/NewTask
   * @version 0.5.0
   */

  /**
   * Constructs a new <code>NewTask</code>.
   * @alias module:model/NewTask
   * @class
   * @param image {String} Name of Docker image to use. This is optional and can be used to override the image defined at the group level.
   * @param priority {Integer} Priority of the task. Higher has more priority. 3 levels from 0-2. Tasks at same priority are processed in FIFO order.
   */
  var exports = function(image, priority) {
    var _this = this;

    _this['image'] = image;



    _this['priority'] = priority;


  };

  /**
   * Constructs a <code>NewTask</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NewTask} obj Optional instance to populate.
   * @return {module:model/NewTask} The populated <code>NewTask</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('image')) {
        obj['image'] = ApiClient.convertToType(data['image'], 'String');
      }
      if (data.hasOwnProperty('payload')) {
        obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
      }
      if (data.hasOwnProperty('delay')) {
        obj['delay'] = ApiClient.convertToType(data['delay'], 'Integer');
      }
      if (data.hasOwnProperty('timeout')) {
        obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Integer');
      }
      if (data.hasOwnProperty('priority')) {
        obj['priority'] = ApiClient.convertToType(data['priority'], 'Integer');
      }
      if (data.hasOwnProperty('max_retries')) {
        obj['max_retries'] = ApiClient.convertToType(data['max_retries'], 'Integer');
      }
      if (data.hasOwnProperty('retries_delay')) {
        obj['retries_delay'] = ApiClient.convertToType(data['retries_delay'], 'Integer');
      }
    }
    return obj;
  }

  /**
   * Name of Docker image to use. This is optional and can be used to override the image defined at the group level.
   * @member {String} image
   */
  exports.prototype['image'] = undefined;
  /**
   * Payload for the task. This is what you pass into each task to make it do something.
   * @member {String} payload
   */
  exports.prototype['payload'] = undefined;
  /**
   * Number of seconds to wait before queueing the task for consumption for the first time. Must be a positive integer. Tasks with a delay start in state \"delayed\" and transition to \"running\" after delay seconds.
   * @member {Integer} delay
   * @default 0
   */
  exports.prototype['delay'] = 0;
  /**
   * Maximum runtime in seconds. If a consumer retrieves the task, but does not change it's status within timeout seconds, the task is considered failed, with reason timeout (Titan may allow a small grace period). The consumer should also kill the task after timeout seconds. If a consumer tries to change status after Titan has already timed out the task, the consumer will be ignored. 
   * @member {Integer} timeout
   * @default 60
   */
  exports.prototype['timeout'] = 60;
  /**
   * Priority of the task. Higher has more priority. 3 levels from 0-2. Tasks at same priority are processed in FIFO order.
   * @member {Integer} priority
   */
  exports.prototype['priority'] = undefined;
  /**
   * \"Number of automatic retries this task is allowed.  A retry will be attempted if a task fails. Max 25. Automatic retries are performed by titan when a task reaches a failed state and has `max_retries` > 0. A retry is performed by queueing a new task with the same image id and payload. The new task's max_retries is one less than the original. The new task's `retry_of` field is set to the original Task ID. The old task's `retry_at` field is set to the new Task's ID.  Titan will delay the new task for retries_delay seconds before queueing it. Cancelled or successful tasks are never automatically retried.\" 
   * @member {Integer} max_retries
   * @default 0
   */
  exports.prototype['max_retries'] = 0;
  /**
   * Time in seconds to wait before retrying the task. Must be a non-negative integer.
   * @member {Integer} retries_delay
   * @default 60
   */
  exports.prototype['retries_delay'] = 60;



  return exports;
}));



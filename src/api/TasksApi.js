/**
 * IronWorker CE API
 * The ultimate, language agnostic, container based task processing framework.
 *
 * OpenAPI spec version: 0.5.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TasksWrapper', 'model/Error', 'model/TaskWrapper', 'model/IdStatus', 'model/Complete', 'model/Start', 'model/NewTasksWrapper'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TasksWrapper'), require('../model/Error'), require('../model/TaskWrapper'), require('../model/IdStatus'), require('../model/Complete'), require('../model/Start'), require('../model/NewTasksWrapper'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkerJs) {
      root.WorkerJs = {};
    }
    root.WorkerJs.TasksApi = factory(root.WorkerJs.ApiClient, root.WorkerJs.TasksWrapper, root.WorkerJs.Error, root.WorkerJs.TaskWrapper, root.WorkerJs.IdStatus, root.WorkerJs.Complete, root.WorkerJs.Start, root.WorkerJs.NewTasksWrapper);
  }
}(this, function(ApiClient, TasksWrapper, Error, TaskWrapper, IdStatus, Complete, Start, NewTasksWrapper) {
  'use strict';

  /**
   * Tasks service.
   * @module api/TasksApi
   * @version 0.5.3
   */

  /**
   * Constructs a new TasksApi. 
   * @alias module:api/TasksApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupsNameTasksGet operation.
     * @callback module:api/TasksApi~groupsNameTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task list by group name.
     * This will list tasks for a particular group.
     * @param {String} name Name of group for this set of tasks.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAfter Will return tasks created after this time. In RFC3339 format.
     * @param {Integer} opts.n Number of tasks to return per page. Default is 50. Max is 1000.
     * @param {String} opts.cursor Pass this in from a previous query to paginate results.
     * @param {module:api/TasksApi~groupsNameTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksWrapper}
     */
    this.groupsNameTasksGet = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksGet";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'created_after': opts['createdAfter'],
        'n': opts['n'],
        'cursor': opts['cursor']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TasksWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdCancelPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task.
     * Cancels a task in delayed, queued or running status. The worker may continue to run a running task. reason is set to &#x60;client_request&#x60;. The task&#39;s completed_at field is set to the current time on the taskserver.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:api/TasksApi~groupsNameTasksIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdCancelPost = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdCancelPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdCancelPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdDelete operation.
     * @callback module:api/TasksApi~groupsNameTasksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the task.
     * Delete only succeeds if task status is one of &#x60;succeeded | failed | cancelled&#x60;. Cancel a task if it is another state and needs to be deleted.  All information about the task, including the log, is irretrievably lost when this is invoked. 
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:api/TasksApi~groupsNameTasksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.groupsNameTasksIdDelete = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdDelete";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdDelete";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdErrorPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdErrorPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark task as failed.
     * Task is marked as failed if it was in a valid state. Task&#39;s &#x60;finished_at&#x60; time is initialized.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:model/Complete} body 
     * @param {module:api/TasksApi~groupsNameTasksIdErrorPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdErrorPost = function(name, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdErrorPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdErrorPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling groupsNameTasksIdErrorPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/error', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdGet operation.
     * @callback module:api/TasksApi~groupsNameTasksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets task by id
     * Gets a task by id.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id task id
     * @param {module:api/TasksApi~groupsNameTasksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdGet = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdGet";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdLogGet operation.
     * @callback module:api/TasksApi~groupsNameTasksIdLogGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the log of a completed task.
     * Retrieves the log from log storage.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:api/TasksApi~groupsNameTasksIdLogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.groupsNameTasksIdLogGet = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdLogGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdLogGet";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdLogPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdLogPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send in a log for storage.
     * Logs are sent after a task completes since they may be very large and the runner can process the next task.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {File} log Output log for the task. Content-Type must be \&quot;text/plain; charset&#x3D;utf-8\&quot;.
     * @param {module:api/TasksApi~groupsNameTasksIdLogPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdLogPost = function(name, id, log, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdLogPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdLogPost";
      }

      // verify the required parameter 'log' is set
      if (log == undefined || log == null) {
        throw "Missing the required parameter 'log' when calling groupsNameTasksIdLogPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'log': log
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/log', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdRetryPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdRetryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry a task.
     * \&quot;The /retry endpoint can be used to force a retry of tasks with status succeeded, cancelled or failed. The retried task has the same attributes. max_retries is not modified.\&quot; 
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:api/TasksApi~groupsNameTasksIdRetryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdRetryPost = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdRetryPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdRetryPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdStartPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark task as started, ie: status &#x3D; &#39;running&#39;
     * Task status is changed to &#39;running&#39; if it was in a valid state before. Task&#39;s &#x60;started_at&#x60; time is initialized.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:model/Start} body 
     * @param {module:api/TasksApi~groupsNameTasksIdStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdStartPost = function(name, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdStartPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdStartPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling groupsNameTasksIdStartPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdSuccessPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdSuccessPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark task as succeeded.
     * Task status is changed to succeeded if it was in a valid state before. Task&#39;s &#x60;completed_at&#x60; time is initialized.
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:model/Complete} body 
     * @param {module:api/TasksApi~groupsNameTasksIdSuccessPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWrapper}
     */
    this.groupsNameTasksIdSuccessPost = function(name, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdSuccessPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdSuccessPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling groupsNameTasksIdSuccessPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/success', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksIdTouchPost operation.
     * @callback module:api/TasksApi~groupsNameTasksIdTouchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend task timeout.
     * Consumers can sometimes take a while to run the task after accepting it.  An example is when the runner does not have the docker image locally, it can spend a significant time downloading the image. If the timeout is small, the task may never get to run, or run but not be accepted by Titan. Consumers can touch the task before it times out. Titan will reset the timeout, giving the consumer another timeout seconds to run the task. Touch is only valid while the task is in a running state. If touch fails, the runner may stop running the task. 
     * @param {String} name Name of group for this set of tasks.
     * @param {String} id Task id
     * @param {module:api/TasksApi~groupsNameTasksIdTouchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.groupsNameTasksIdTouchPost = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksIdTouchPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling groupsNameTasksIdTouchPost";
      }


      var pathParams = {
        'name': name,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/groups/{name}/tasks/{id}/touch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsNameTasksPost operation.
     * @callback module:api/TasksApi~groupsNameTasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue task
     * Enqueues task(s). If any of the tasks is invalid, none of the tasks are enqueued. 
     * @param {String} name name of the group.
     * @param {module:model/NewTasksWrapper} body Array of tasks to post.
     * @param {module:api/TasksApi~groupsNameTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksWrapper}
     */
    this.groupsNameTasksPost = function(name, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling groupsNameTasksPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling groupsNameTasksPost";
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TasksWrapper;

      return this.apiClient.callApi(
        '/groups/{name}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGet operation.
     * @callback module:api/TasksApi~tasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get next task.
     * Gets the next task in the queue, ready for processing. Titan may return &lt;&#x3D;n tasks. Consumers should start processing tasks in order. Each returned task is set to &#x60;status&#x60; \&quot;running\&quot; and &#x60;started_at&#x60; is set to the current time. No other consumer can retrieve this task.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.n Number of tasks to return. (default to 1)
     * @param {module:api/TasksApi~tasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksWrapper}
     */
    this.tasksGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'n': opts['n']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TasksWrapper;

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
